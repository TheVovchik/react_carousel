{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","allPositions","currentPosition","currentIndex","infinity","props","carousel","clickNext","newIndex","length","setState","clickPrev","clickAuto","animationDuration","keyPoints","pointIndex","window","setInterval","clickStop","this","images","step","frameSize","itemWidth","calculateCheckPoints","prevProps","clearInterval","fullLength","stepLength","stopLength","i","push","className","style","width","transform","transitionDuration","map","imageUrl","index","src","alt","type","onClick","Component","App","useState","setStep","setFrameSize","setItemWidth","setAnimationDuration","htmlFor","id","name","value","min","max","onChange","e","Number","currentTarget","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c70ac05.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinity: boolean;\n};\n\ntype State = {\n  allPositions: number[];\n  currentPosition: number;\n  currentIndex: number;\n  infinity: boolean;\n};\n\nexport class Carousel extends Component<Props, State> {\n  state = {\n    allPositions: [],\n    currentPosition: 0,\n    currentIndex: 0,\n    infinity: this.props.infinity,\n  };\n\n  carousel = 0;\n\n  componentDidMount() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n    } = this.props;\n\n    const keyPoints = this.calculateCheckPoints(images,\n      step,\n      frameSize,\n      itemWidth);\n\n    let pointIndex = 0;\n\n    if (!this.state.infinity) {\n      this.carousel = window.setInterval(() => {\n        this.setState({ currentPosition: keyPoints[pointIndex] });\n        if (pointIndex !== keyPoints.length - 1) {\n          pointIndex += 1;\n        } else {\n          pointIndex = 0;\n        }\n\n        this.setState({ currentIndex: pointIndex });\n      }, animationDuration);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      infinity,\n    } = this.state;\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n    } = this.props;\n\n    if (infinity) {\n      window.clearInterval(this.carousel);\n    }\n\n    if (prevProps.itemWidth !== this.props.itemWidth\n      || prevProps.step !== this.props.step\n      || prevProps.frameSize !== this.props.frameSize\n      || prevProps.animationDuration !== this.props.animationDuration) {\n      const keyPoints = this.calculateCheckPoints(images,\n        step,\n        frameSize,\n        itemWidth);\n      let pointIndex = 0;\n\n      this.setState({ allPositions: keyPoints });\n\n      if (!infinity) {\n        window.clearInterval(this.carousel);\n        this.carousel = window.setInterval(() => {\n          this.setState({ currentPosition: keyPoints[pointIndex] });\n          if (pointIndex !== keyPoints.length - 1) {\n            pointIndex += 1;\n          } else {\n            pointIndex = 0;\n          }\n\n          this.setState({ currentIndex: pointIndex });\n        }, animationDuration);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.carousel);\n  }\n\n  clickNext = () => {\n    const {\n      allPositions,\n      currentIndex,\n      infinity,\n    } = this.state;\n    let newIndex = currentIndex;\n\n    if (!infinity) {\n      this.setState({ infinity: true });\n    } else if (newIndex !== allPositions.length - 1) {\n      newIndex += 1;\n    } else {\n      newIndex = 0;\n    }\n\n    this.setState({\n      currentIndex: newIndex,\n      currentPosition: allPositions[newIndex],\n    });\n  };\n\n  clickPrev = () => {\n    const {\n      allPositions,\n      currentIndex,\n      infinity,\n    } = this.state;\n\n    if (!infinity) {\n      this.setState({ infinity: true });\n    }\n\n    let newIndex = currentIndex;\n\n    if (newIndex !== 0) {\n      newIndex -= 1;\n    } else {\n      newIndex = allPositions.length - 1;\n    }\n\n    this.setState({\n      currentIndex: newIndex,\n      currentPosition: allPositions[newIndex],\n    });\n  };\n\n  clickAuto = () => {\n    const {\n      allPositions,\n      currentIndex,\n      infinity,\n    } = this.state;\n    const { animationDuration } = this.props;\n\n    if (infinity) {\n      this.setState({ infinity: false });\n\n      const keyPoints = allPositions;\n      let pointIndex = currentIndex;\n\n      this.carousel = window.setInterval(() => {\n        this.setState({ currentPosition: keyPoints[pointIndex] });\n        if (pointIndex !== keyPoints.length - 1) {\n          pointIndex += 1;\n        } else {\n          pointIndex = 0;\n        }\n\n        this.setState({ currentIndex: pointIndex });\n      }, animationDuration);\n    }\n  };\n\n  clickStop = () => {\n    const {\n      infinity,\n    } = this.state;\n\n    if (!infinity) {\n      this.setState({ infinity: true });\n    }\n  };\n\n  calculateCheckPoints(images: string[],\n    step: number,\n    frameSize: number,\n    itemWidth: number) {\n    const keyPoints: number[] = [];\n    const fullLength = itemWidth * images.length;\n    const stepLength = itemWidth * step;\n    const windowSize = itemWidth * frameSize;\n    const stopLength = fullLength - windowSize;\n    const currentPosition = 0;\n\n    for (let i = currentPosition; i < fullLength; i += stepLength) {\n      if (i > stopLength) {\n        keyPoints.push(stopLength - stopLength * 2);\n        break;\n      }\n\n      keyPoints.push(i - i * 2);\n    }\n\n    this.setState({ allPositions: keyPoints });\n\n    return keyPoints;\n  }\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n    } = this.props;\n\n    const {\n      currentPosition,\n    } = this.state;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{\n          width: `${frameSize * itemWidth}px`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(${currentPosition}px)`,\n            transitionDuration: `${animationDuration}ms`,\n          }}\n        >\n          {images.map((imageUrl, index) => (\n            <li\n              key={imageUrl}\n              className=\"Carousel__item\"\n            >\n              <img\n                src={imageUrl}\n                alt={`${index + 1}`}\n                style={{\n                  width: `${itemWidth}px`,\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"Carousel__buttons-box navigation\">\n          <button\n            type=\"button\"\n            className=\"navigation__button button-56\"\n            onClick={this.clickPrev}\n          >\n            PREV\n          </button>\n\n          <button\n            data-cy=\"next\"\n            type=\"button\"\n            className=\"navigation__button button-56\"\n            onClick={this.clickAuto}\n          >\n            AUTO\n          </button>\n\n          <button\n            data-cy=\"next\"\n            type=\"button\"\n            className=\"navigation__button button-56\"\n            onClick={this.clickStop}\n          >\n            STOP\n          </button>\n\n          <button\n            data-cy=\"next\"\n            type=\"button\"\n            className=\"navigation__button button-56\"\n            onClick={this.clickNext}\n          >\n            NEXT\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import { FC, useState } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\nconst images: string[] = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nconst App: FC = () => {\n  const [step, setStep] = useState(3);\n  const [frameSize, setFrameSize] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n\n  return (\n    <div\n      className=\"App\"\n    >\n      <h1 data-cy=\"title\" className=\"App__title\">\n        {`Carousel with ${images.length} images`}\n      </h1>\n      <p className=\"App__description\">Buttons:</p>\n      <p className=\"App__description\">\n        prev - move slider one step back and stop auto rotation\n      </p>\n      <p className=\"App__description\">\n        auto - start auto rotation\n      </p>\n      <p className=\"App__description\">\n        stop - stop auto rotation\n      </p>\n      <p className=\"App__description\">\n        next - move slider one step forward and stop auto rotation\n      </p>\n\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinity={false}\n      />\n      <form className=\"App__form form\">\n        <label className=\"form__label\" htmlFor=\"step\">\n          Step - slides spinned in window\n          <br />\n          {`(between 1 and ${images.length})`}\n        </label>\n        <div className=\"form__input\">\n          <input\n            type=\"range\"\n            id=\"step\"\n            name=\"step\"\n            value={`${step}`}\n            min=\"1\"\n            max={`${images.length - 1}`}\n            step=\"1\"\n            onChange={(e) => setStep(Number(e.currentTarget.value))}\n          />\n          <span>{step}</span>\n        </div>\n\n        <label className=\"form__label\" htmlFor=\"frameSize\">\n          Frame size - slides shown in window\n          <br />\n          {`(between 1 and ${images.length})`}\n        </label>\n        <div className=\"form__input\">\n          <input\n            type=\"range\"\n            id=\"frameSize\"\n            name=\"frameSize\"\n            value={`${frameSize}`}\n            min=\"1\"\n            max={`${images.length}`}\n            step=\"1\"\n            onChange={(e) => setFrameSize(Number(e.currentTarget.value))}\n          />\n          <span>{frameSize}</span>\n        </div>\n\n        <label className=\"form__label\" htmlFor=\"itemWidth\">\n          Item width - width of one slide in window\n          <br />\n          (between 80px and 250px)\n        </label>\n        <div className=\"form__input\">\n          <input\n            type=\"range\"\n            id=\"itemWidth\"\n            name=\"itemWidth\"\n            value={`${itemWidth}`}\n            min=\"80\"\n            max=\"250\"\n            step=\"10\"\n            onChange={(e) => setItemWidth(Number(e.currentTarget.value))}\n          />\n          <span>{`${itemWidth}px`}</span>\n        </div>\n\n        <label className=\"form__label\" htmlFor=\"animationDuration\">\n          Animation duration - speed of slides changes\n          <br />\n          (between 500ms and 3000ms)\n        </label>\n        <div className=\"form__input\">\n          <input\n            type=\"range\"\n            id=\"animationDuration\"\n            name=\"animationDuration\"\n            value={`${animationDuration}`}\n            min=\"500\"\n            max=\"3000\"\n            step=\"100\"\n            onChange={(e) => (\n              setAnimationDuration(Number(e.currentTarget.value))\n            )}\n          />\n          <span>{`${animationDuration}ms`}</span>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}